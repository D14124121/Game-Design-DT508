import ddf.minim.*;
Minim minim;
AudioPlayer music; 
AudioSample sndJump, sndRune;

//GLOBAL VARIABLES
int gamestate = 0;

PImage wolf_idle2, wolf_run11, wolf_run22;
PImage bg;
PFont font;
PFont font2;

// CAMERA SCROLLING LEFT/RIGHT
float cameraOffsetX; 

Player thePlayer = new Player();
World theWorld = new World();
Keyboard theKeyboard = new Keyboard();

// SNOW STUFF
int quantity = 150;
float [] xPosition = new float[quantity];
float [] yPosition = new float[quantity];
int [] flakeSize = new int[quantity];
int [] direction = new int[quantity];
int minFlakeSize = 1;
int maxFlakeSize = 5;

// GAME TIMER
int gameStartTimeSec, gameCurrentTimeSec;

// GRAVITY - CHANGING THIS AFFECTS THE GAME BECAUSE MAKING IT HIGHER MEANS HE DOESN'T JUMP THE REQUIRED HEIGHT TO MEET CERTAIN PLATFORMS
final float GRAVITY_POWER = 0.5;

void setup () 
{ 
  size(600, 480); 
  font = loadFont("Viking-Normal-16.vlw");
  font2 = loadFont("Viking-Normal-12.vlw");
  wolf_idle2 = loadImage("wolf_idle2.png");
  wolf_run11 = loadImage("wolf_run11.png");
  wolf_run22 = loadImage("wolf_run22.png");
  bg = loadImage("fenrir.jpg");

  noStroke();
  smooth();

  // SNOW STUFF
  for (int i = 0; i < quantity; i++) {
    flakeSize[i] = round(random(minFlakeSize, maxFlakeSize));
    xPosition[i] = random(0, width);
    yPosition[i] = random(0, height);
    direction[i] = round(random(0, 1));
  }

  cameraOffsetX = 0.0;

  minim = new Minim(this);
  music = minim.loadFile("Wardruna - Fehu.wav", 600);
  music.loop();

  int buffersize = 256;

  sndJump = minim.loadSample("wolf_growl.wav", buffersize);
  sndRune = minim.loadSample("coin.wav", buffersize);

  frameRate(24);
}

void draw()
{
  if (gamestate == 0)
  {
    splash();
  }
  if (gamestate == 1)
  {
    game();
  }
}

void splash()
{
  background(bg);
  textAlign(CENTER);
  textFont(font2);
  fill(255);
  text("Click to play!", 120, height-370);
  text("Music by Wardruna", width/2, height-30);
  resetGame();
}

void game()
{ 
  pushMatrix(); 
  translate(-cameraOffsetX, 0.0);
  updateCameraPosition();
  theWorld.render();
  thePlayer.inputCheck();
  thePlayer.move();
  thePlayer.draw();
  popMatrix();
  fill(255);
  noStroke();
  
  // ININTIAL INSTRUCTIONS, ALSO SHOWS WHEN WINDOW IS NOT IN FOCUS
  float time = millis()/1000;
  if (time > 2 && time < 8) {
    text("Use arrows to move\nSpacebar to Jump", width/2, height/2);
  }

  for (int i = 0; i < xPosition.length; i++) {

    ellipse(xPosition[i], yPosition[i], flakeSize[i], flakeSize[i]);
    if (direction[i] == 0) {
      xPosition[i] += map(flakeSize[i], minFlakeSize, maxFlakeSize, .1, .5);
    } else {
      xPosition[i] -= map(flakeSize[i], minFlakeSize, maxFlakeSize, .1, .5);
    }    
    yPosition[i] += flakeSize[i] + direction[i]; 
    if (xPosition[i] > width + flakeSize[i] || xPosition[i] < -flakeSize[i] || yPosition[i] > height + flakeSize[i]) {
      xPosition[i] = random(0, width);
      yPosition[i] = -flakeSize[i];
    }
  }
  
  // DOES WINDOW HAVE FOCUS? IF NOT DISPLAY THIS MESSAGE
  if (focused == false) {
    textAlign(CENTER);
    outlinedText("Click this area to play\n\nUse arrows to move\nSpacebar to Jump", width/2, height-460);
  } else {
    textAlign(LEFT); 
    outlinedText("Runes : "+thePlayer.runesCollected +"/"+theWorld.runesInStage, 8, height-460);
    textAlign(RIGHT);
    if (gameWon() == false) { // STOP TIMER WHEN ALL RUNES COLLECTED
      gameCurrentTimeSec = millis()/1000;
    }
    int minutes = (gameCurrentTimeSec-gameStartTimeSec)/60;
    int seconds = (gameCurrentTimeSec-gameStartTimeSec)%60;
    if (seconds < 10) {
      outlinedText(minutes +" : 0"+seconds, width-8, height-460);
    } else {
      outlinedText(minutes +" : "+seconds, width-8, height-460);
    }
    textAlign(CENTER);
    if (gameWon()) {
      outlinedText("All Runes Collected!\nPress R to Reset", width/2, height/2-12);
    }
  }
}

void resetGame()
{
  thePlayer.reset(); // RESET RUNES COLLECTED
  theWorld.reload(); // RESET MAP/GRID
  // RESET CORNER TIMER
  gameCurrentTimeSec = gameStartTimeSec = millis()/1000; // DIVIDE BY 1000 TO TURN MILLISECONDS TO SECONDS
}

// HAVE ALL RUNES BEEN COLLECTED?
Boolean gameWon() {
  return (thePlayer.runesCollected == theWorld.runesInStage);
}

void outlinedText(String sayThis, float atX, float atY) 
{
  textFont(font); 
  fill(51, 51, 68); 
  text(sayThis, atX-1, atY);
  text(sayThis, atX+1, atY);
  text(sayThis, atX, atY-1);
  text(sayThis, atX, atY+1);
  fill(255);
  text(sayThis, atX, atY);
}

void outlinedText2(String sayThis, float atX, float atY) {
  textFont(font2);
  fill(51, 51, 68); 
  text(sayThis, atX-1, atY);
  text(sayThis, atX+1, atY);
  text(sayThis, atX, atY-1);
  text(sayThis, atX, atY+1);
  fill(255); 
  text(sayThis, atX, atY);
}

// CAMERA UPDATE
void updateCameraPosition() {
  int rightEdge = World.GRID_UNITS_WIDE*World.GRID_UNIT_SIZE-width;
  cameraOffsetX = thePlayer.position.x-width/2;
  if (cameraOffsetX < 0) {
    cameraOffsetX = 0;
  }
  if (cameraOffsetX > rightEdge) {
    cameraOffsetX = rightEdge;
  }
}

// MOUSE AND KEY INPUTS
void mousePressed()
{
  if (gamestate != 2)
  {
    gamestate++;
  }
}

void keyPressed() {
  theKeyboard.pressKey(key, keyCode);
}

void keyReleased() {
  theKeyboard.releaseKey(key, keyCode);
}
